// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// 유저 테이블
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(STUDENT)
  active    Boolean  @default(false)
  student   Student?
  teacher   Teacher?
  manager   Manager?
  Token     Token[]
}

// email 확인을 위한 토큰
model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@index([userId])
}

// Role enum 타입 'TEACHER' | 'STUDENT' | 'ADMIN'
enum Role {
  TEACHER
  STUDENT
  MANAGER
}

// student 테이블
model Student {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id])
  mataCode       Int?             @unique
  missions       Mission[]
  onLineLessons  OnLineLesson[]
  offLineLesson  OffLineLesson?
  studentClass   StudentClass[]
  StudentComment StudentComment[]
  StudentTeacher StudentTeacher[]

  @@index([userId])
}

// 학생과 선생님이 M:N 관계를 가지는 테이블
model StudentTeacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId Int

  @@index([studentId])
  @@index([teacherId])
}

// 학생이 선생님에게 남기는 코멘트 테이블
model StudentComment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  mission   Mission  @relation(fields: [missionId], references: [id])
  missionId Int
  comment   String

  @@index([studentId])
  @@index([missionId])
}

// onLineLesson 테이블 (온라인 수업)
// 기한, 수업상태
model OnLineLesson {
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  student                Student                  @relation(fields: [studentId], references: [id])
  studentId              Int
  status                 OnLineLessonStatus       @default(COMPLETED)
  count                  Int                      @default(0)
  total                  Int                      @default(0)
  startDate              DateTime
  endDate                DateTime
  OnLineLessonUploadDate OnLineLessonUploadDate[]
  OnLineLessonUploadDay  OnLineLessonUploadDay[]

  @@index([studentId])
}

// onLineLesson 미션 업데이트 하는 날짜 테이블
model OnLineLessonUploadDate {
  id             Int          @id @default(autoincrement())
  date           DateTime
  onLineLessonId Int
  onLineLesson   OnLineLesson @relation(fields: [onLineLessonId], references: [id])

  @@index([onLineLessonId])
}

// onLineLesson 미션 업데이트 하는 요일 테이블
model OnLineLessonUploadDay {
  id             Int          @id @default(autoincrement())
  day            Day
  timeStart      DateTime
  timeEnd        DateTime
  onLineLesson   OnLineLesson @relation(fields: [onLineLessonId], references: [id])
  onLineLessonId Int

  @@index([onLineLessonId])
}

// 온라인 수업 상태 테이블
// 진행중, 완료
enum OnLineLessonStatus {
  ONGOING
  COMPLETED
}

// offLineLesson 테이블 (오프라인 수업)
// 수업 진행한 날짜들, 남은 수업횟수, 처음 시작할 때 정한 횟수
// 수업 요일, 수업 시간
model OffLineLesson {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  student    Student      @relation(fields: [studentId], references: [id])
  studentId  Int          @unique
  count      Int          @default(0)
  total      Int          @default(0)
  lessonDay  LessonDay[]
  lessonDate LessonDate[]

  @@index([studentId])
}

model LessonDate {
  id              Int           @id @default(autoincrement())
  date            DateTime
  isPresent       Boolean
  offLineLessonId Int
  offLineLesson   OffLineLesson @relation(fields: [offLineLessonId], references: [id])

  @@index([offLineLessonId])
}

// 수업 요일 테이블 (오프라인 수업)
model LessonDay {
  id              Int           @id @default(autoincrement())
  day             Day
  timeStart       DateTime
  timeEnd         DateTime
  offLineLesson   OffLineLesson @relation(fields: [offLineLessonId], references: [id])
  offLineLessonId Int
  class           Class?        @relation(fields: [classId], references: [id])
  classId         Int?

  @@index([offLineLessonId])
  @@index([classId])
}

// 수업 요일 enum
enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

// teacher 테이블
model Teacher {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id])
  managerId      Int?
  manager        Manager?         @relation(fields: [managerId], references: [id])
  class          Class[]
  missions       Mission[]
  StudentTeacher StudentTeacher[]

  @@index([userId])
  @@index([managerId])
}

// Manager 테이블 전체를 관리하는 관리자
model Manager {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  teachers Teacher[]

  @@index([userId])
}

// student가 본 Worksheets 테이블
model Worksheet {
  id              Int              @id @default(autoincrement())
  WorksheetCode   Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  mission         Mission?         @relation(fields: [missionId], references: [id])
  missionId       Int
  type            WorksheetType    @default(HOMEWORK)
  status          WorksheetStatus  @default(PENDING)
  score           Int?
  WorksheetTracks WorksheetTrack[]

  @@index([missionId])
}

// Worksheet 종류 테이블
enum WorksheetType {
  HOMEWORK
  CLASSWORK
}

enum WorksheetStatus {
  PENDING // 제출 전
  SUBMITTED // 제출됨
  GRADED // 채점 완료
}

// 학습 목표에 들어갈 비디오 테이블
model Video {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  url       String
  duration  Int
  mission   Mission  @relation(fields: [missionId], references: [id])
  missionId Int

  @@index([missionId])
}

// 학습목표 테이블
model Mission {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  student        Student?         @relation(fields: [studentId], references: [id])
  studentId      Int?
  class          Class?           @relation(fields: [classId], references: [id])
  classId        Int?
  teacher        Teacher          @relation(fields: [teacherId], references: [id])
  teacherId      Int
  description    String
  goals          Goal[]
  status         MissionStatus
  startDate      DateTime
  endDate        DateTime
  worksheets     Worksheet[]
  missionType    MissionType      @default(INDIVIDUAL)
  videos         Video[]
  Evaluation     Evaluation[]
  StudentComment StudentComment[]

  @@index([studentId])
  @@index([classId])
  @@index([teacherId])
}

// mission 타입 
enum MissionType {
  INDIVIDUAL
  GROUP
}

// 학습목표에 포함된 Goals 테이블
model Goal {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mission   Mission  @relation(fields: [missionId], references: [id])
  missionId Int
  goal      String

  @@index([missionId])
}

// 학습목표 상태 테이블
enum MissionStatus {
  NOT_STARTED
  ONGOING
  COMPLETED
  FAILED
  ABANDONED
}

// 학생 평가 테이블 mission이 얼마나 잘 되었는지 평가
model Evaluation {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  mission        Mission  @relation(fields: [missionId], references: [id])
  missionId      Int
  teacherComment String
  AIComment      String

  @@index([missionId])
}

// series 테이블
model Series {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  seriesCode  Int      @unique
  description String?
  mataId      String?

  chapters Chapter[]
}

// 각 series에 속한 단원명 테이블
model Chapter {
  id        Int      @id @default(autoincrement())
  seriesId  Int
  series    Series   @relation(fields: [seriesId], references: [id])
  setName   String
  setCode   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Track     Track[]

  @@index([seriesId])
}

// 각 단원에 속한 문제 트랙 테이블
model Track {
  id              Int              @id @default(autoincrement())
  trackCode       Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  chapter         Chapter          @relation(fields: [chapterId], references: [id])
  chapterId       Int
  worksheetTracks WorksheetTrack[]

  @@index([chapterId])
}

// worksheet 과  track 의 다대다 관계
model WorksheetTrack {
  worksheetId Int
  trackId     Int
  worksheet   Worksheet @relation(fields: [worksheetId], references: [id])
  track       Track     @relation(fields: [trackId], references: [id])

  @@id([worksheetId, trackId])
  @@index([worksheetId])
  @@index([trackId])
}

// 학생들이 속한 클래스 테이블
// student 와 다대다 관계 --> studentClass 테이블을 만들어서 표현
// teacher와 1대다 관계
model Class {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  title        String
  lessenDay    LessonDay[]
  teacher      Teacher        @relation(fields: [teacherId], references: [id])
  teacherId    Int
  studentClass StudentClass[]
  Mission      Mission[]

  @@index([teacherId])
}

// 학생과 클래스의 다대다 관계를 표현하는 테이블
model StudentClass {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int

  @@id([studentId, classId])
  @@index([studentId])
  @@index([classId])
}
